class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

Node* createBinTree(vector<vector<int>> indexes){
    Node* head = new Node(1);
    queue<Node*> q;
    q.push(head);
    Node* curr;
    for(int i=0; i< indexes.size(); i++){
        curr = q.front();
        q.pop();
        if(indexes[i][0] >0){
            curr->left = new Node(indexes[i][0]);
            q.push(curr->left);
        }
        if(indexes[i][1]>0){
            curr->right = new Node(indexes[i][1]);
            q.push(curr->right);
        }     
    }
    return head;
}

void swapChildren(Node* head, int lvl, int curr_lvl){
    int curr = curr_lvl+1;
    
    if(curr%lvl == 0){
        Node* temp = head->left;
        head->left = head->right;
        head->right = temp;
    }
    if(head->left)
        swapChildren(head->left, lvl, curr);
    if(head->right)
        swapChildren(head->right, lvl, curr);
}
vector<int> res;
void printTree(Node* head){
    
    if(head->left)
        printTree(head->left);
    res.push_back(head->data);
    if(head->right)
        printTree(head->right);  
}

vector<vector<int>> swapNodes(vector<vector<int>> indexes, vector<int> queries) {
    vector<vector<int>> results;
    Node* head = createBinTree(indexes);
    for(int i=0; i< queries.size(); i++){
        swapChildren(head, queries[i],0);
        printTree(head);
        results.push_back(res);
        res.clear();

    }
    return results;
    
}